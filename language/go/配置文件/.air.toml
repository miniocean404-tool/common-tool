# https://github.com/cosmtrek/air/blob/master/air_example.toml
root = "."
tmp_dir = "tmp"

[build]
    # 在构建之前运行的命令数组
    # pre_cmd = ["echo 'hello air' > pre_cmd.txt"]

    # 简单的 shell 命令。你也可以用 make windows 需要加上.exe
    # 运行二进制 (bin/full_bin) 时添加额外的参数。
    # cmd = "go build -o ./tmp/main ./main.go" 如果想传递参数，那就执行打包后的文件时传递参数 例：./tmp/main -f xx
    cmd = "go build -o ./tmp/main.exe ./src/main.go"

    # 在构建之后运行的命令数组
    # post_cmd = ["echo 'hello air' > post_cmd.txt"]

    # 打包生产的二进制文件在哪里运行，并且可以传递参数
    # bin = "tmp/main.exe"

    # 自定义执行程序的命令，可以添加额外的编译标识例如添加环境 APP_ENV=dev
    # Windows 平台示例：full_bin = "APP_ENV=dev tmp\main.exe"
    # full_bin = "./tmp/main.exe"

    # 运行二进制 (bin 或者 full_bin) 时添加额外的参数。
    # args_bin = ["-f", "apps/app/web/etc/web-api.yaml"]
    args_bin = [""]

    # 观察文件的扩展名
    include_ext = ["go", "html"]
    # 忽略的文件名及目录.
    exclude_dir = ["assets", "tmp", "logs", "node_modules"]
    # 指定检视的目录
    # include_dir = ["src"]
    # 指定监视的文件
    # include_file = ["main.go"]
    # 排除的文件
    exclude_file = []
    # 排除特定的正则表达式
    exclude_regex = ["_test\\.go"]
    # 是否排除未更改的文件
    exclude_unchanged = true
    # 遵循目录的符号链接
    follow_symlink = true
    # 日志文件放在tmp_dir中
    log = "air.log"

    # 轮询文件来观察更改，而不是使用 fsnotify
    poll = false
    # 构建延迟时间 ms
    delay = 500

    # 当错误发生时，停止运行旧的二进制文件
    stop_on_error = true
    # 在杀死进程之前发送中断信号(windows不支持此功能)
    send_interrupt = false
    # 发送中断信号后的延迟 纳秒
    kill_delay = 500

    # 是否执行后不断重新运行二进制文件
    rerun = false
    # 每次从新执行的延迟
    rerun_delay = 500

[log]
    # 展示日志时间
    time = true
    # 是否只显示主要日志（使观察者、构建、运行者静音）
    main_only = true

[color]
    # 自定义每个部分的颜色。如果没有发现颜色，使用原始应用程序日志。
    main = "magenta"
    watcher = "cyan"
    build = "yellow"
    runner = "green"

[misc]
    # 退出时删除tmp目录
    clean_on_exit = true

[screen]
# 是否在重新构建时清除屏幕
clear_on_rebuild = true
# 未知
keep_scroll = true

# 在浏览器上启用实时重新加载
[proxy]
  enabled = false
  proxy_port = 8090
  app_port = 8080
