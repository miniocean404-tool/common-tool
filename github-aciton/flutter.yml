# github action Flutter https://juejin.cn/post/7080764562609274916
# 插件市场：https://github.com/marketplace?type=actions
# 文档: https://docs.github.com/cn/actions

# 默认都是项目根目录
# Mac OS 命令
#    cd build/macos/Build/Products/Release
#    zip -r movie.mac.zip movie.app/*
# 位置： build/macos/Build/Products/Release/movie.mac.zip

# 这表示该工作流文件的名称，将在 Github 的 actions 选项卡作为名称显示
name: 发布 Release
on:
  # 这将触发该工作流的事件名称，它可以包含事件列表，例如这里监听的事 push
  push:
    branches:
      - master
    tags:
      - "v*"
    paths-ignore:
      - ".idea/**"
      - ".gitattributes"
      - ".github/**.json"
      - ".gitignore"
      - ".gitmodules"
      - "**.md"
      - "**/*.txt"
      - "**/*.png"
      - "**/*.jpg"
      - "LICENSE"
      - "NOTICE"
  pull_request:
    paths-ignore:
      - ".idea/**"
      - ".gitattributes"
      - ".github/**.json"
      - ".gitignore"
      - ".gitmodules"
      - "**.md"
      - "**/*.txt"
      - "**/*.png"
      - "**/*.jpg"
      - "LICENSE"
      - "NOTICE"

jobs:
  # 这是工作 ID，你也可以根据自己的需要命名，会在 action 的执行过程中显示
  build:
    if: startsWith(github.ref, 'refs/tags/')
    # 每个 job 的名字
    name: 打包
    # jobs 需要运行在虚拟机上，在这里中使用了 ubuntu-latest，当然你也可以使用windows-latest 或者 macos-latest；
    runs-on: macos-latest
    # 每个 jobs 可以将需要执行的内容划分为不同步骤，每个 name 为一个步骤
    # 每个步骤中都是以项目目录为基准，除非一个 run 命令过程中, cd 到了某个目录 在 cd ..回来 这时候是命令的目录
    steps:
      # 每个步骤的名字,没有步骤的话需要加(-), 比如 - uses、- run
      - name: 签出文件
        # 使用一些官方或者第三方的 actions 来执行，
        # 例如：这里使用官方的 actions/checkout@v3，它会check-out 我们的 repo
        # 之后工作流可以直接访问 repo 里的文件；
        uses: actions/checkout@v3

      - name: 设置 JDK 环境
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: 12

      - name: 设置 Flutter 环境
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.0.1"
          channel: "stable"

        # 动态输入 配置信息到文件中
        # - uses: finnp/create-file-action@master
        # env:
        #   FILE_NAME: lib/common/config/ignoreConfig.dart
        #   FILE_DATA: class NetConfig { static const CLIENT_ID = "${{ secrets.CLIENT_ID }}"; static const CLIENT_SECRET = "${{ secrets.CLIENT_SECRET }}";}

      - name: 安装依赖
        # 用于提供执行命令；
        run: |
          flutter pub get
          flutter pub deps

      - name: 打包 APK
        run: flutter build apk --release  --obfuscate --split-debug-info=debug_info --no-shrink --dart-define ENV=dev --dart-define CHANNEL=MI

      - name: 打包 IPA
        # ln -s 软链接
        run: |
          flutter build ios --release --no-codesign  --split-debug-info=./symbols
          cd build/ios/iphoneos
          mkdir Payload
          cd Payload
          ln -s ../Runner.app
          cd ..
          zip -r app.ipa Payload

      # 如果不归为一个文件夹 会因为不同目录导致上传文件为 build 之后的 所有文件层级
      # 比如 actions/upload-artifact 的 path 目录为
      #  build/app/outputs/apk/release/*.apk  build/ios/iphoneos/app.ipa
      # 最后会上传成一个文件夹有这两个目录结构 app/outputs/apk/release/xx.apk ios/iphoneos/xx.ipa
      - name: 将 APK IPA 归并到一个目录中再准备上传
        run: |
          mkdir tag
          cp build/app/outputs/apk/release/*.apk tag
          cp build/ios/iphoneos/app.ipa tag

      - name: 分享 Release 包给其他 Job
        uses: actions/upload-artifact@v3
        with:
          name: package_app_ipa
          path: |
            tag/*

  # 上传到 release 进行版本发布
  publish:
    name: 上传到 release 进行版本发布
    # 等待某个工作完成后
    needs: build
    # 存在 tag 的时候才会触发该任务执行
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: macos-latest
    steps:
      # 接收上传的东西
      - name: 获取分享的安装包
        uses: actions/download-artifact@v3
        with:
          # name 为分享 Release 包里的 name
          name: package_app_ipa
          path: prod/package

      - name: 展示下载的文件列表
        run: |
          pwd
          ls -R
        working-directory: prod/package

      - name: 上传到 release 进行版本发布
        uses: softprops/action-gh-release@v1
        # 403 错误 设置 Action 权限 github -> setting -> actiong -> general -> Workflow permissions
        with:
          generate_release_notes: true
          tag_name: ${{ github.ref }}
          body: ${{ github.event.head_commit.message }}
          token: ${{ github.token }}
          files: |
            prod/package/*.apk
            prod/package/app.ipa
