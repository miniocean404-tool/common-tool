{
	"include": ["./**/*"], //包含* 匹配0或多个字符（不包括目录分隔符）也就是任意文件 **/ 递归匹配任意子目录 ? 匹配一个任意字符（不包括目录分隔符）
	"exclude": ["node_modules", "dist", "build"], //不包含
	"compileOnSave": true, //保存时自动编译
	//  "extends": "./configs/base",                   // 利用extends属性从另一个配置文件里继承配置。 来至所继承配置文件的files，include和exclude覆盖源配置文件的属性。 配置文件里的相对路径在解析时相对于它所在的文件。*/
	"compilerOptions": {
		/* 基础配置 */
		"target": "ESNEXT", // 指定 ECMAScript 目标版本：'ES3'（默认）、'ES5'、'ES2015'、'ES2016'、'ES2017'、'ES2018'、'ES2019'、'ES2020'、'ES2021' 或 'ESNEXT'。 ,
		"module": "commonjs", // 指定模块代码生成规范：“none”、“commonjs”、“amd”、“system”、“umd”、“es2015”、“es2020”或“ESNext”。 ,
		// "lib": [],                                   // 指定要包含在编译中的库文件
		"allowJs": false, // 允许编译 javascript 文件。
		"checkJs": false, // 是否检查js代码语法是否符合规范，允许在JS文件中报错，通常与allowJS一起使用
		"jsx": "preserve", //  指定 JSX 代码生成：'preserve'、'react-native'、'react'、'react-jsx' 或 'react-jsxdev'。

		/* 模块输出配置 */
		"outDir": "./build", // 输出文件目录
		"rootDir": "./", // 指定输入文件的根目录。用于通过 --outDir 控制输出目录结构。
		// "outFile": "./",                             //  连接并将输出发送到单个文件,合并为一个文件,用了模块化就合并不上了,用 "module": "system",可以
		// "noEmit": true,                              //  不输出文件,即编译后不会生成任何js文件
		// "composite": true,                           //  启用项目编译
		"removeComments": true, //  删除编译后的所有的注释
		"incremental": true, //  启用增量编译 TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度
		"tsBuildInfoFile": "./build/incremental", //  增量编译文件的存储位置
		"declaration": true, // 生成相应的“.d.ts”文件,开启后会自动生成声明文件
		"declarationMap": true, // 为每个相应的“.d.ts”文件生成一个源映射。
		"sourceMap": true, // 生成相应的“.map”文件。

		"importHelpers": true, // 从 tslib 导入辅助工具函数,文件必须是模块
		"downlevelIteration": true, // 降级遍历器实现，如果目标源是es3/5，那么遍历器会有降级的实现
		// "isolatedModules": true,                     //  将每个文件转换为一个单独的模块(类似于'ts.transpileModule')。

		/* 源映射选项 */
		// "sourceRoot": "",                             // 指定调试器定位TypeScript文件的位置而不是源文件的位置。
		// "mapRoot": "",                                // 指定调试器定位map文件的位置，而不是自动生成的位置。
		// "inlineSourceMap": true,                      // 生成一个带有源映射的文件，而不是一个单独的文件。
		// "inlineSources": true,                        // 在单个文件中发出源和源地图;需要设置'——inlineSourceMap'或'——sourceMap'。生成目标文件的inline SourceMap，inline SourceMap会包含在生成的js文件中

		/* 模块解析选项 */
		"moduleResolution": "node", // 模块解析策略，ts默认用node的解析策略，即相对的方式导入或'classic' (TypeScript pre-1.6)。
		"baseUrl": ".", // 解析非绝对模块名的基本目录。
		"paths": {
			// 一系列的条目，它们重新映射导入到相对于'baseUrl'的查找位置、ts中的alias进行别名
			"@/*": ["src/*"],
			"api/*": ["src/api/*"],
			"assets/*": ["src/assets/*"],
			"common/*": ["src/common/*"],
			"views/*": ["src/views/*"],
			"pages/*": ["src/pages/*"],
			"components/*": ["src/components/*"],
			"env/*": ["src/env/*"],
			"store/*": ["src/store/*"],
			"style/*": ["src/style/*"],
			"static/*": ["src/static/*"]
		},
		// "rootDirs": [],                              // 根文件夹列表，它们的组合内容代表了运行时项目的结构。将多个目录放在一个虚拟目录下，用于运行时，即编译后引入文件的位置可能发生变化，这也设置可以虚拟src和out在同一个目录下，不用再去改变路径也不会报错
		// "typeRoots": ["./types","./node_modules/@types"],// 包含类型定义的文件夹列表。声明文件目录，默认是node_modules/@types
		// "types": [],                                 // 编译中、加载中包含的声明文件。(指定在上面根声明文件的地址中的声明文件名的才包含进来)
		// "allowSyntheticDefaultImports": true,        // 允许从没有默认导出的模块中默认导入。这并不影响代码发出，只影响类型检查。
		"esModuleInterop": true, // 通过为所有导入创建命名空间对象，允许CommonJS和ES模块之间的互操作性。意味着“allowSyntheticDefaultImports”。 允许export=导出，由import from 导入,
		// "preserveSymlinks": true,                    // 不解析符号链接的真实路径。
		// "allowUmdGlobalAccess": true,                // 允许在模块中全局变量的方式访问umd模块

		/* 实验性的选项 */
		"experimentalDecorators": true, // 支持ES7装饰器
		"emitDecoratorMetadata": true, // 支持为装饰器发送类型元数据,reflect-metadata

		/* 高级选项
    "skipLibCheck": false,                          // 跳过声明文件的类型检查。,
    "forceConsistentCasingInFileNames": true,       // 禁止大小写不一致的引用同一个文件。
    "locale": "zh-CN",                              // 命令行添加--locale zh-CN可报中文错误

    /* 其他 */
		"noEmitOnError": true, // 产生错误是否进行编译，生成js文件
		"diagnostics": false, // 打印诊断信息
		"preserveConstEnums": true, // 保留 const 和 enum 声明
		"declarationDir": "./build/types", // 指定生成声明文件存放目录
		"emitDeclarationOnly": false, // 只生成声明文件，而不会生成js文件
		"noEmitHelpers": true, // 不生成helper函数，减小体积，需要额外安装，常配合importHelpers一起使用
		"listEmittedFiles": true, // 打印出编译后生成文件的名字。
		"listFiles": true, // 打印编译的文件(包括引用的声明文件和库文件)
		//"files": ["src/main.ts"],                     // files 配置项值是一个数组，用来指定了待编译包的入口文件。

		/* 严格类型检查选项 */
		"strict": true, // 启用所有严格的类型检查选项。
		"noImplicitAny": true, // 在隐含'any'类型的表达式和声明上引发错误。
		"strictNullChecks": true, // 启用严格的空检查。
		"strictFunctionTypes": true, // 启用函数类型的严格检查,不允许函数参数双向协变
		"strictBindCallApply": true, // 对函数启用严格的'bind'， 'call'和'apply'方法。
		"strictPropertyInitialization": true, // 启用严格检查类的属性必须初始化。
		"noImplicitThis": true, // 如果'this'表达式隐含了'any'类型，则引发错误。
		"alwaysStrict": true, // 以严格模式解析每个源文件并发出"use strict",用来设置编译后的文件是否使用严格模式，如果有模块化导入导出自动就进入严格模式了

		/* 额外的检查  */
		"noUnusedLocals": true, // 检查只声明、未使用的局部变量(只提示不报错)
		"noUnusedParameters": true, // 检查未使用的函数参数(只提示不报错)
		"noImplicitReturns": true, // 当函数中不是所有的代码路径都有返回值时，报告错误。
		"noFallthroughCasesInSwitch": true, // 防止switch语句贯穿(即如果没有break语句后面不会执行)
		"noUncheckedIndexedAccess": true, // 在索引签名结果中包含'undefined'
		"noImplicitOverride": true, // 确保子类中的重写成员被标记为'override'修饰符。
		"noPropertyAccessFromIndexSignature": true // 需要索引签名中未声明的属性来使用元素访问。
	}
}
